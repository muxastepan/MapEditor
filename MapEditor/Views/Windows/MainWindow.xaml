<Window x:Class="MapEditor.Views.Windows.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MapEditor"
        xmlns:controls="clr-namespace:MapEditor.Views.Controls"
        xmlns:viewModels="clr-namespace:MapEditor.ViewModels"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:models="clr-namespace:NavigationApp.Models"
        xmlns:utilities="clr-namespace:MapEditor.Utilities"
        xmlns:converters="clr-namespace:MapEditor.Converters"
        xmlns:models1="clr-namespace:NavigationApp.Models;assembly=WebApiNET"
        xmlns:models2="clr-namespace:MapEditor.Models"
        xmlns:mapElements="clr-namespace:MapEditor.Models.MapElements"
        xmlns:helpers="clr-namespace:MapEditor.Helpers"
        xmlns:bindingMapElements="clr-namespace:MapEditor.Models.MapElements.BindingMapElements"
        xmlns:businessEntities="clr-namespace:MapEditor.Models.BusinessEntities"
        mc:Ignorable="d"
        ResizeMode="NoResize"
        WindowState="Maximized"
        Title="MapEditor">
    <Window.DataContext>
        <viewModels:MainWindowViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <helpers:MainWindowViewModelBindingProxy x:Key="ViewModelBindingProxy" Data="{Binding }"/>
        <Style TargetType="RadioButton" x:Key="ToolRadioButtonStyle">
            <Setter Property="Template" Value="{StaticResource ToolRadioButtonTemplate}"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="GroupName" Value="Tools"/>
            <Setter Property="Command" Value="{Binding SelectToolCommand}"/>
            <Style.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource EqualsConverter}">
                            <Binding Path="SelectedTool"/>
                            <Binding RelativeSource="{RelativeSource Self}"
                                     Path="CommandParameter"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="IsChecked" Value="True"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <DataTemplate DataType="{x:Type bindingMapElements:VisualNode}">
            <CheckBox
                Name="CheckBox"
                ToolTipService.InitialShowDelay="200"
                ToolTipService.ShowOnDisabled="True"
                ToolTipService.BetweenShowDelay="200"
                FontSize="{Binding DataContext.Settings.VisualSettings.TransitiveNodeFontSize,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"
                Tag="{Binding}"
                Template="{StaticResource NodeButtonTemplate}"
                Background="{Binding Color,Converter={StaticResource ColorConverter}}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Panel.ZIndex="1000"
                IsChecked="{Binding IsSelected, Mode=TwoWay}"
                Visibility="{Binding IsVisible,Converter={StaticResource BooleanToVisibilityConverter}}"
                Content="{Binding LinkedFloor}">
                <CheckBox.Resources>
                    <helpers:MapElementBindingProxy Data="{Binding }" x:Key="MapElementBindingProxy"/>
                </CheckBox.Resources>
                <CheckBox.ContextMenu>
                    <ContextMenu
                        Name="ContextMenu">
                        <MenuItem Header="Удалить"
                                  Command="{Binding Data.DeleteMapElementCommand,Source={StaticResource ViewModelBindingProxy}}"
                                  CommandParameter="{Binding  Data,Source={StaticResource MapElementBindingProxy}}"/>
                        <MenuItem Header="Привязать к объекту..."
                                  Command="{Binding Data.LinkMapElementToBusinessElementCommand,Source={StaticResource ViewModelBindingProxy}}"
                                  CommandParameter="{Binding Data,Source={StaticResource MapElementBindingProxy}}"/>
                    </ContextMenu>
                </CheckBox.ContextMenu>
                <CheckBox.ToolTip>
                    <ToolTip>
                        <StackPanel>
                            <TextBlock>
                                <Run Text="ID точки"/>
                                <Run Text=":"/>
                                <Run Text="{Binding Node.Id}"/>
                            </TextBlock>
                            <TextBlock Text="{Binding BindedBusinessElement.ParentBusinessEntity.Name}"/>
                            <ContentPresenter Content="{Binding BindedBusinessElement}"/>
                        </StackPanel>
                    </ToolTip>
                </CheckBox.ToolTip>
                <b:Interaction.Triggers>
                    <utilities:DisableRoutingEventTrigger EventName="MouseRightButtonDown">
                        <b:ChangePropertyAction TargetObject="{Binding ElementName=ContextMenu}"
                                                PropertyName="IsOpen"
                                                Value="True"/>
                    </utilities:DisableRoutingEventTrigger>
                    <b:KeyTrigger Key="Delete">
                        <b:InvokeCommandAction
                    Command="{Binding DataContext.DeleteMapElementCommand,
                    RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                    </b:KeyTrigger>
                    <utilities:DisableRoutingEventTrigger EventName="PreviewMouseDown">
                        <b:InvokeCommandAction
                            Command="{Binding DataContext.DragCommand,RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                            PassEventArgsToCommand="True"/>
                    </utilities:DisableRoutingEventTrigger>
                    <b:EventTrigger EventName="Checked">
                        <b:InvokeCommandAction
                            Command="{Binding DataContext.LinkNodesCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                            CommandParameter="{Binding}"/>
                        <b:InvokeCommandAction
                            Command="{Binding DataContext.MakeRouteCommand,
                            RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>

                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </CheckBox>
            <!--<DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsLinked}" Value="True">
                    <Setter TargetName="CheckBox" Property="Background" Value="LightGreen"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsLinked}" Value="False">
                    <Setter TargetName="CheckBox" Property="Background" Value="White"/>
                </DataTrigger>
            </DataTemplate.Triggers>-->
        </DataTemplate>

        <DataTemplate DataType="{x:Type mapElements:Link}">
            <CheckBox
                IsChecked="{Binding IsSelected,Mode=TwoWay}"
                Visibility="{Binding IsVisible,Converter={StaticResource BooleanToVisibilityConverter}}">
                <CheckBox.Resources>
                    <helpers:MapElementBindingProxy Data="{Binding }" x:Key="MapElementBindingProxy"/>
                </CheckBox.Resources>
                <CheckBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Удалить"
                                  Command="{Binding Data.DeleteMapElementCommand,Source={StaticResource ViewModelBindingProxy}}"
                                  CommandParameter="{Binding Data,Source={StaticResource MapElementBindingProxy}}"/>
                    </ContextMenu>
                </CheckBox.ContextMenu>
                <CheckBox.Template>
                    <ControlTemplate TargetType="CheckBox">
                        <Line
                            Stroke="Black"
                            StrokeThickness="{Binding DataContext.Settings.VisualSettings.LinkThickness,
                            RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}"
                            Name="Line"
                            X1="{Binding From.Node.Point.X}"
                            Y1="{Binding From.Node.Point.Y}"
                            X2="{Binding To.Node.Point.X}"
                            Y2="{Binding To.Node.Point.Y}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="Line" Property="Stroke" Value="Orange"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </CheckBox.Template>
                <b:Interaction.Triggers>
                    <b:KeyTrigger Key="Delete">
                        <b:InvokeCommandAction
                            Command="{Binding DataContext.DeleteMapElementCommand,
    RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                    </b:KeyTrigger>
                </b:Interaction.Triggers>
            </CheckBox>
        </DataTemplate>

        <DataTemplate DataType="{x:Type bindingMapElements:VisualArea}">
            <Grid>
                <ItemsControl ItemsSource="{Binding Area.NaviPoints}"
                      Panel.ZIndex="1">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding X}"/>
                            <Setter Property="Canvas.Top" Value="{Binding Y}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Button
                        Width="{Binding DataContext.PointWidth,RelativeSource={RelativeSource FindAncestor, AncestorType=ItemsControl}}"
                        Height="{Binding DataContext.PointHeight,RelativeSource={RelativeSource FindAncestor,AncestorType=ItemsControl}}"
                        Name="PointButton"
                        Visibility="{Binding DataContext.IsEditing,
                        RelativeSource={RelativeSource FindAncestor, AncestorType=Grid},
                        Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding DataContext.FinishAreaCommand,RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}">
                                <b:Interaction.Triggers>
                                    <utilities:DisableRoutingEventTrigger EventName="PreviewMouseDown">
                                        <b:InvokeCommandAction
                                            Command="{Binding DataContext.DragCommand,RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                            PassEventArgsToCommand="True"/>
                                    </utilities:DisableRoutingEventTrigger>
                                </b:Interaction.Triggers>
                            </Button>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <CheckBox
                    Name="CheckBox"
                    ToolTipService.InitialShowDelay="200"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTipService.BetweenShowDelay="200"
                    Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                    IsChecked="{Binding IsSelected, 
                    Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                    Template="{StaticResource AreaButtonTemplate}"
                    Content="{Binding Area.NaviPoints,Converter={StaticResource PointConverter}}">
                    <CheckBox.Resources>
                        <helpers:MapElementBindingProxy Data="{Binding }" x:Key="MapElementBindingProxy"/>
                    </CheckBox.Resources>
                    <CheckBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Удалить"
                                      Command="{Binding Data.DeleteMapElementCommand,Source={StaticResource ViewModelBindingProxy}}"
                                      CommandParameter="{Binding Data,Source={StaticResource MapElementBindingProxy}}"/>
                            <MenuItem Header="Редактировать"
                                      Command="{Binding Data.EditAreaCommand,Source={StaticResource ViewModelBindingProxy}}"
                                      CommandParameter="{Binding Data,Source={StaticResource MapElementBindingProxy}}"/>
                            <MenuItem Header="Привязать к объекту..."
                                      Command="{Binding Data.LinkMapElementToBusinessElementCommand,Source={StaticResource ViewModelBindingProxy}}"
                                      CommandParameter="{Binding Data,Source={StaticResource MapElementBindingProxy}}"/>
                        </ContextMenu>
                    </CheckBox.ContextMenu>
                    <CheckBox.ToolTip>
                        <ToolTip>
                            <StackPanel>
                                <TextBlock>
                                    <Run Text="ID области"/>
                                    <Run Text=":"/>
                                    <Run Text="{Binding Area.Id}"/>
                                </TextBlock>
                                <TextBlock Text="{Binding BindedBusinessElement.ParentBusinessEntity.Name}"/>
                                <ContentPresenter Content="{Binding BindedBusinessElement}"/>
                            </StackPanel>
                        </ToolTip>
                    </CheckBox.ToolTip>
                    <b:Interaction.Triggers>
                        <b:KeyTrigger Key="Delete">
                            <b:InvokeCommandAction
                    Command="{Binding DataContext.DeleteMapElementCommand,
                    RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                        </b:KeyTrigger>
                    </b:Interaction.Triggers>
                    <CheckBox.Style>
                        <Style TargetType="CheckBox">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsEditing}" Value="True">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding DataContext.SelectedTool,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                             Value="{x:Static viewModels:ToolType.Point}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding DataContext.SelectedTool,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                             Value="{x:Static viewModels:ToolType.Route}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding DataContext.SelectedTool,RelativeSource={RelativeSource FindAncestor,AncestorType=Window}}" 
                                             Value="{x:Static viewModels:ToolType.Hand}">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </CheckBox.Style>
                </CheckBox>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsLinked}" Value="True">
                    <Setter TargetName="CheckBox" Property="Background" Value="LightGreen"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsLinked}" Value="False">
                    <Setter TargetName="CheckBox" Property="Background" Value="Gray"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate DataType="{x:Type businessEntities:BusinessEntity}">
            <ListBox ItemsSource="{Binding BusinessElements}"/>
        </DataTemplate>
    </Window.Resources>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <b:InvokeCommandAction Command="{Binding OnLoaded}"
                                   CommandParameter="{Binding ElementName=NodesItemsControl}"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>

    <Grid>
        <Border Background="LightGray"
                Width="300"
                CornerRadius="10"
                VerticalAlignment="Top"
                HorizontalAlignment="Right"
                Panel.ZIndex="10"
                Margin="10">
            <StackPanel
                Margin="10">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="0.5*"/>
                    </Grid.ColumnDefinitions>
                    <Button 
                        Grid.Column="0"
                        Content="Настройки"
                            Command="{Binding OpenSettingsCommand}"
                            Height="50"
                        Margin="10"/>
                    <Button
                        Grid.Column="1"
                        Command="{Binding OpenHelpWindowCommand}"
                        ContentTemplate="{StaticResource InfoIcon}"
                        Height="50"
                        Margin="10"/>
                </Grid>
                <TextBlock Text="Инструменты"
                       FontSize="32"
                       HorizontalAlignment="Center"/>
                <UniformGrid
                    Rows="2">
                    <RadioButton Content="Курсор"
                                 Style="{StaticResource ToolRadioButtonStyle}"
                                 CommandParameter="{x:Static viewModels:ToolType.Cursor}"/>
                    <RadioButton Content="Рука"
                                 Style="{StaticResource ToolRadioButtonStyle}"
                                 CommandParameter="{x:Static viewModels:ToolType.Hand}"/>
                    <RadioButton Content="Точка"
                                 Style="{StaticResource ToolRadioButtonStyle}"
                                 CommandParameter="{x:Static viewModels:ToolType.Point}"/>
                    <RadioButton Content="Область"
                                 Style="{StaticResource ToolRadioButtonStyle}"
                                 CommandParameter="{x:Static viewModels:ToolType.Area}"/>
                    <RadioButton Content="Маршрут"
                                 Style="{StaticResource ToolRadioButtonStyle}"
                                 CommandParameter="{x:Static viewModels:ToolType.Route}"/>
                </UniformGrid>
                <TextBlock Text="Этаж"
                           FontSize="32"
                           HorizontalAlignment="Center"/>
                <ComboBox
                    ItemsSource="{Binding Floors}"
                    SelectedItem="{Binding SelectedFloor,
                    Mode=TwoWay}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>
        </Border>

        <Border Background="LightGray"
                Width="300"
                Height="280"
                CornerRadius="10"
                VerticalAlignment="Top"
                HorizontalAlignment="Left"
                Panel.ZIndex="10"
                Margin="10">
            <StackPanel>
                <TextBlock Text="Объекты для связи"
                           TextAlignment="Center"
                           FontSize="32"/>
                <TabControl ItemsSource="{Binding Settings.NetworkSettings.BusinessEntities}"
                            Width="290"
                            Height="230">
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Name}"/>
                    </DataTemplate>
                </TabControl.ItemTemplate>
            </TabControl>
            </StackPanel>
        </Border>
        <controls:ZoomBorder
            Width="{Binding SelectedFloor.DisposableImage.Source.Width}"
            Height="{Binding SelectedFloor.DisposableImage.Source.Height}">
            <Grid>
                <b:Interaction.Triggers>
                    <b:EventTrigger
                        EventName="MouseLeftButtonDown">
                        <b:InvokeCommandAction
                            Command="{Binding CreateMapElementCommand}"
                            PassEventArgsToCommand="True"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <Image Source="{Binding SelectedFloor.DisposableImage.Source}"
                       Stretch="None"/>

                <ItemsControl ItemsSource="{Binding Nodes}"
                              Panel.ZIndex="2"
                              x:Name="NodesItemsControl">

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="Canvas.Left" Value="{Binding VisualCoordinates.X}"/>
                            <Setter Property="Canvas.Top" Value="{Binding VisualCoordinates.Y}"/>
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.Style>
                        <Style TargetType="ItemsControl">
                        </Style>
                    </ItemsControl.Style>
                </ItemsControl>

                <ItemsControl ItemsSource="{Binding Links}"
                              Panel.ZIndex="1"
                              Name="LinksItemsControl">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Grid/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>

                <ItemsControl ItemsSource="{Binding Areas}"
                              Name="AreasItemsControl">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>

                <Polyline Stroke="Orange"
                          StrokeThickness="{Binding Settings.VisualSettings.LinkThickness}"
                          Panel.ZIndex="1"
                          Points="{Binding FloorRoute,Converter={StaticResource PointConverter}}"/>
            </Grid>
        </controls:ZoomBorder>
        <ItemsControl
            VerticalAlignment="Bottom"
            HorizontalAlignment="Left"
            ItemsSource="{Binding NotificationService.Notifications}">
        </ItemsControl>
    </Grid>
</Window>
